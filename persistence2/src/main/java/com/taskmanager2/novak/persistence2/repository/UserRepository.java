// Пакет, содержащий репозитории для работы с сущностями в базе данных
package com.taskmanager2.novak.persistence2.repository;

// Импорт сущности UserEntity, которая будет использоваться для работы с данными
import com.taskmanager2.novak.persistence2.entity.UserEntity;

// Импорт JpaRepository для работы с базой данных через Spring Data JPA
import org.springframework.data.jpa.repository.JpaRepository;

// Импорт аннотации @Repository для пометки интерфейса как Spring Bean
import org.springframework.stereotype.Repository;

import java.util.Optional;

/**
 * Репозиторий для работы с сущностью UserEntity.
 * Расширяет JpaRepository, что позволяет использовать стандартные методы CRUD для работы с пользователями.
 * Также содержит методы для поиска пользователей по имени и проверки существования имени пользователя.
 * @Repository: Это аннотация, которая маркирует интерфейс как Spring Bean, являющийся репозиторием для работы с базой данных
 *  через JPA. Это позволяет Spring автоматически управлять созданием экземпляров репозитория.
JpaRepository<UserEntity, Long>: Интерфейс репозитория, параметризированный сущностью UserEntity и типом идентификатора
 (в данном случае Long). JpaRepository предоставляет стандартные методы для выполнения операций с базой данных, такие как
  сохранение, удаление, обновление и поиск.
Метод findByUsername(String username): Это метод для поиска пользователя в базе данных по его имени (username).
 Возвращается объект Optional<UserEntity>, который либо содержит найденного пользователя, либо пустой, если пользователь 
 с таким именем не найден. Использование Optional помогает избежать ошибок, связанных с NullPointerException.
Метод existsByUsername(String username): Этот метод проверяет, существует ли пользователь с данным именем в базе данных. 
Он возвращает true, если пользователь с таким именем найден, и false в противном случае. Это полезно для проверки уникальности 
имени пользователя при регистрации, чтобы не было двух пользователей с одинаковым именем.

Этот репозиторий предоставляет доступ к данным о пользователях и поддерживает операции, связанные с именами пользователей, 
такие как поиск и проверка существования.
 */
@Repository  // Указывает, что это Spring Data JPA репозиторий
public interface UserRepository extends JpaRepository<UserEntity, Long> {

    /**
     * Метод для поиска пользователя по имени пользователя (username).
     * Этот метод будет использоваться для извлечения пользователя из базы данных по имени.
     *
     * @param username имя пользователя, по которому будет выполнен поиск.
     * @return Optional, содержащий найденного пользователя, если он существует.
     */
    Optional<UserEntity> findByUsername(String username);

    /**
     * Метод для проверки, существует ли пользователь с таким именем.
     * Этот метод полезен для проверки уникальности имени пользователя при регистрации или изменении данных.
     *
     * @param username имя пользователя для проверки.
     * @return true, если пользователь с таким именем существует, иначе false.
     */
    boolean existsByUsername(String username); // Добавляем этот метод
}
